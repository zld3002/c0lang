//test return 0

// Line 85 raised an error due to = NULL assignment
// where the rhs has ambiguous type, fixed Feb 2, 2011 -fp

#use <string>

typedef struct word_path * word_path;

struct word_path {
	string word;
	word_path parent;
};
typedef word_path elem;


struct list {
  elem data;
  struct list* next;
};

typedef struct list* list;

bool is_segment(list start, list end)
{ list p = start;
  while (p != end) {
    if (p == NULL) return false;
    p = p->next;
  }
  return true;
}

int seg_length(list start, list end)
//@requires is_segment(start, end);
{ list p = start; int len = 0;
  while (p != end)
    //@loop_invariant is_segment(p, end);
    { len++; p = p->next; }
  return len;
}

bool is_circular(list l)
{ if (l == NULL) return false;
  { list L1 = l;
    list L2 = l->next;
    while (L1 != L2)
      //@loop_invariant is_segment(L1, L2);
      { if (L2 == NULL || L2->next == NULL) return false;
	L1 = L1->next;
	L2 = L2->next->next;
      }
    return true;
  }
}


/* Interface section for stacks */

struct stack;
typedef struct stack* stack;
bool s_empty(stack S);		/* O(1) */
stack s_new();			/* O(1) */
void push(stack S, elem x);	/* O(1) */
elem pop(stack S);		/* O(1) */
int s_size(stack S);		/* O(n), could easily be O(1) */

struct stack {
  list top;
};

bool is_stack (stack S) {
  return is_segment(S->top, NULL);
}

bool s_empty(stack S)
//@requires is_stack(S);
{
  return S->top == NULL;
}

stack s_new()
//@ensures is_stack(\result);
//@ensures s_empty(\result);
{
  stack S = alloc(struct stack);
  S->top = NULL;
  return S;
}

void push(stack S, elem s)
//@requires is_stack(S);
//@ensures !s_empty(S);
{
  list first = alloc(struct list);
  first->data = s;
  first->next = S->top;
  S->top = first;
}

elem pop(stack S)
//@requires is_stack(S);
//@ensures is_stack(S);
{ assert(S->top != NULL);
  { elem data = S->top->data;
    S->top = S->top->next;
    return data;
  }
}

int s_size(stack S)
//@requires is_stack(S);
{
  return seg_length(S->top, NULL);
}

int main(){
return 0;
}
