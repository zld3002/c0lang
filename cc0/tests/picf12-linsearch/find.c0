/* Linear and binary search
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 */

bool is_in(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
{
  for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    if (A[i] == x) return true;
  return false;
}

bool is_sorted(int[] A, int n)
//@requires 0 <= n && n <= \length(A);
{
  for (int i = 0; i < n-1; i++)
    /* Careful here: i <= n-1 is not a loop invariant */
    /* Why? */
    //@loop_invariant 0 <= i;
    {
      if (!(A[i] <= A[i+1])) return false;
    }
  return true;
}

int linsearch(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, n);
/*@ensures (-1 == \result && !is_in(x, A, n))
        || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
  for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant i == 0 || x > A[i-1];
    {
      if (A[i] == x) return i;
      else if (A[i] > x) return -1;
      //@assert A[i] < x;
      { }
    }
  //@assert n == 0 || x > A[n-1];
  return -1;
}
