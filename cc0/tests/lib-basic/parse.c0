void testbool(string s, bool *expected) {
  bool *result = parse_bool(s);
  assert ((expected == NULL && result == NULL) ||
          (expected != NULL && result != NULL && *result == *expected));
  // string_join("Did not parse ", s);
}

void testint(string s, int i) {
  int *result = parse_int(s, 10);
  assert(result != NULL && *result == i);
  // string_join("Expected to parse this string into an int: ", s));
}

void testint16(string s, int i) {
  int *result = parse_int(s, 16);
  assert(result != NULL && *result == i);
  // string_join("Expected to parse this string into an int: ", s));
}

void testintfail(string s) {
  int *result = parse_int(s, 10);
  assert(result == NULL);
  // string_join(string_join(string_join("Expected not to parse \"", s), "\" into "), string_fromint(*result)));
}

void testintfail16(string s) {
  int *result = parse_int(s, 16);
  assert(result == NULL);
  // string_join(string_join(string_join("Expected not to parse \"", s), "\" into "), string_fromint(*result)));
}

int main() {
  bool *t = alloc(bool);
  *t = true;
  testbool("asf", NULL);
  testbool("true", t);
  testbool("false", alloc(bool));
  testint("0", 0);
  testint("-1", -1);
  /* trailing junk now disallowed -wjl */
  // testint("3.4", 3);
  testintfail("3.4");
  // testint("-0.4", 0);
  testintfail("-0.4");
  testint("-0", 0);
  testintfail("337x");
  testintfail("");
  testintfail(" ");
  testintfail(" 3");
  testint16("0xa", 10);
  testint("-07", -7);
  testint("016", 16);
  testintfail("-");
  testintfail("+");
  /* initial plus now disallowed, since C0 doesn't allow it -wjl */
  testintfail("+3");
  testintfail("--x");
  testintfail("x--");
  testintfail("asf");
  testintfail("af");
  testint16("af", 175);
  testintfail("4294967296");
  /* allowed for consistency with C0 number syntax, Aug 2022, -ib, fp */
  // testintfail("2147483648");
  testint( "2147483648", 2147483648);
  testint( "2147483648", -2147483648);
  testint( "2147483647",  2147483647);
  testint("-2147483648", -2147483648);
  testintfail("-2147483649");
  return 0;
}
