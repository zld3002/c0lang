
// cc0 -dv dfa.c0 -lconio -lstring

/* make a symbol abstraction?  is_symbol iff between 'a' and 'z' inclusive.. */

int char_to_index(char chr)
//@requires 'a' <= chr && chr <= 'z';
//@ensures 0 <= \result && \result <= 25;
{
  assert('a' <= chr && chr <= 'z'); // "invalid character"
  return char_ord(chr) - char_ord('a');
}

char next_char(char c)
//@requires 'a' <= c && c <= 'z';
{
    return char_chr(char_ord(c) + 1);
}


/* states are integers between 1 and numstates of the dfa, inclusive */

typedef int state;

int state_to_index(state q)
//@requires 1 <= q;
//@ensures 0 <= \result;
{
    return q - 1;
}


struct dfa {
    int numstates;  /* states are between 1 and numstates */
    state initial;
    state[] final;  /* accepting states */
    int numfinal;   /* number of accepting states */
    state[] transition;   /* transition[state_to_index(q)*26 + char_to_index(c)]
                             is where we go from q when we read character c */
};

typedef struct dfa* dfa;

bool is_state(dfa D, state q) {
    return 1 <= q && q <= D->numstates;
}

state transition(dfa D, state q, char c) {
    return D->transition[state_to_index(q)*26 + char_to_index(c)];
}

void set_transition(dfa D, state q, char c, state p) {
    D->transition[state_to_index(q)*26 + char_to_index(c)] = p;
}

/* XXX idea: sparse representation of the DFA -- 0 is an error state */

bool is_dfa(dfa D)
//@requires \length(D->final) == D->numfinal;
//@requires \length(D->transition) == 26*D->numstates;
{
    int i; state s; char c;
    /* require initial state to be a valid state */
    if (!is_state(D, D->initial)) return false;
    /* require number of final states to be <= number of states */
    if (!(D->numfinal <= D->numstates)) return false;
    /* XXX require final states to be unique? */
    /* require each final state to be a valid state */
    for (i = 0; i < D->numfinal; i++)
        if (!is_state(D, D->final[i])) return false;
    /* require each transition to be to a valid state */
    for (s = 1; s <= D->numstates; s++)
        for (c = 'a'; c <= 'z'; c = next_char(c))
            if (!is_state(D, transition(D, s, c)))
            {
               /* HACK: this marks the transition() function as pure*/
               //@assert !is_state(D, transition(D, s, c));
               return false;
            }
    /* after passing this battery of inspections, it must be a dfa! */
    return true;
}

/* XXX if the final states are sorted, we can use binary search */

bool is_final(dfa D, state q)
//@requires is_dfa(D);
//@requires is_state(D, q);
{
    int i;
    /* try to find s in the set of final states */
    for (i = 0; i < D->numfinal; i++)
        if (D->final[i] == q) return true;
    /* not found?  not final. */
    return false;
}

bool accepts(dfa D, string s)
//@requires is_dfa(D);
{
    state q = D->initial;
    int len = string_length(s);
    int i;
    for (i = 0; i < len; i++) {
        char c = string_charat(s, i);
        q = transition(D, q, c);
    }
    return is_final(D, q);
}

/*** test code ***/
string bool_to_string(bool b) {
    if(b) return "accepted";
    else  return "rejected";
}

void test(dfa D, string s) {
    print(bool_to_string(accepts(D, s)));
    print(": \""); print(s); println("\"");
}

int main() {
    /* test dfa to recognize a*b*a */
    dfa d = alloc(struct dfa);
    /* five states total */
    d->numstates = 5;
    /* start in state 1 */
    d->initial = 1;
    /* two final states: 2 and 4 */
    d->numfinal = 2;
    d->final = alloc_array(state, d->numfinal);
    d->final[0] = 2;
    d->final[1] = 4;
    /* transition function: 5 almost everywhere:
     * __|_'a'__'b'__'c'__'d'__...____
     * 1 |  2    3    5    5   ...
     * 2 |  2    3    5    5   ...
     * 3 |  4    3    5    5   ...
     * 4 |  5    5    5    5   ...
     * 5 |  5    5    5    5   ...
     */
    d->transition = alloc_array(state, 26*d->numstates);
    { int i;
      for (i = 0; i < 26*d->numstates; i++) d->transition[i] = 5;
    }
    set_transition(d, 1, 'a', 2); set_transition(d, 1, 'b', 3);
    set_transition(d, 2, 'a', 2); set_transition(d, 2, 'b', 3);
    set_transition(d, 3, 'a', 4); set_transition(d, 3, 'b', 3);
    //@assert is_dfa(d);
    assert(is_dfa(d)); // "not a dfa"

    test(d, "");
    test(d, "a");
    test(d, "abba");
    test(d, "aaba");
    test(d, "aabaa");
    test(d, "aaaaaaabbbbbbbbbbbbb");
    test(d, "aaaaaaabbbbbbbbbbbbba");
    test(d, "bbbba");
    test(d, "bbbbabbb");
    test(d, "aaabbbbabbb");
    test(d, "aaabbbba");
    test(d, "aaabbccbba");
    test(d, "abc");
    
    return 0;
}
