/* Linear and binary search, including specifications
 * Frank Pfenning, Fall 2010
 */
/* % cc0 -lconio lcg.c0 find.c0 */
/* % cc0 -lconio mersenne.c0 find.c0 */
#include <conio.h0>
#include "rand.h0"

/* is_in(x, A, n) iff x in A[0..n-1] */
bool is_in (int x, int[] A, int n)
//@requires n <= \length(A);
{ int i;
  for (i = 0; i < n; i++)
    if (A[i] == x) return true;
  return false;
}

/* find1(x, A, n) return index of x in A[0..n-1], -1 ow */
/* linear search on unsorted array */
int find1 (int x, int[] A, int n)
//@requires n <= \length(A);
/*@ensures (0 <= \result && \result < n && A[\result] == x)
  @     || (\result == -1 && !is_in(x, A, n));
  @*/
{
  int i;
  for (i = 0; i < n; i++)
    if (A[i] == x) return i;
  return -1;
}

/* sorted(A, n) iff A[0..n-1] is in ascending order */
bool sorted(int[] A, int n)
//@requires n <= \length(A);
{ int i;
  for (i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i && i <= n-1;
    if (!(A[i] <= A[i+1])) return false;
  return true;
}

/* find2(x, A, n) return index of x in A[0..n-1], -1 ow */
/* linear search on sorted array */
int find2 (int x, int[] A, int n)
//@requires sorted(A, n);
/*@ensures (0 <= \result && \result < n && A[\result] == x)
  @      ||(\result == -1 && !is_in(x, A, n));
  @*/
{ int i = 0;
  while (i < n && A[i] < x)
    //loop_invariant 0 <= i && i <= n;
    i++;
  //@assert(i >= n || A[i] >= x);
  if (i >= n || A[i] > x) return -1;
  else return i;
}

/* below(A, left, right, x) if any y in A[left,right-1] < x */
bool below (int[] A, int left, int right, int x)
//@requires 0 <= left && left <= right && right <= \length(A);
{ int i;
  for (i = left; i < right; i++)
    if (!(A[i] < x)) return false;
  return true;
}

/* above(A, left, right, x) if all y in A[left,right-1] > x */
bool above (int[] A, int left, int right, int x)
//@requires 0 <= left && left <= right && right <= \length(A);
{ int i;
  for (i = left; i < right; i++)
    if (!(A[i] > x)) return false;
  return true;
}

/* aboveeq(A, left, right, x) if all y in A[left,right-1] >= x */
bool aboveeq (int[] A, int left, int right, int x)
//@requires 0 <= left && left <= right && right <= \length(A);
{ int i;
  for (i = left; i < right; i++)
    if (!(A[i] >= x)) return false;
  return true;
}

/* find3(x, A, n) = index of x in A if exists, -1 ow */
/* binary search over sorted array, version 1 */
int find3 (int x, int[] A, int n)
//@requires sorted(A, n);
/*@ensures (0 <= \result && \result < n && A[\result] == x)
  @      ||(\result == -1 && !is_in(x, A, n));
  @*/
{ int lower = 0; int upper = n;
  while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    // loop_invariant A[0..lower-1] < x && x < A[upper..n-1];
    //@loop_invariant below(A,0,lower,x) && above(A,upper,n,x);
    { int mid = (lower + upper)/2;
      //@assert lower <= mid && mid < upper;
      if (A[mid] < x) lower = mid+1;
      else if (A[mid] > x) upper = mid;
      else /*@ assert(A[mid] == x); @*/ return mid;
    }
  return -1;
}

/* find3(x, A, n) = index of x in A if exists, -1 ow */
/* binary search over sorted array, version 2 */
int find4 (int x, int[] A, int n)
//@requires sorted(A, n);
/*@ensures (0 <= \result && \result < n && A[\result] == x)
  @      ||(\result == -1 && !is_in(x, A, n));
  @*/
{ int lower = 0; int upper = n;
  while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    //@loop_invariant below(A,0,lower,x) && aboveeq(A,upper,n,x);
    { int mid = (lower + upper)/2;
      //@assert lower <= mid && mid < upper;
      if (A[mid] < x) lower = mid+1;
      else /*@ assert(A[mid] >= x); @*/ upper = mid;
    }
  //@assert lower == upper;
  if (upper < n && A[upper] == x) return upper;
  else return -1;
}

int abs (int n)
//@ensures \result >= 0;
{ return n >= 0 ? n : -n; }

int main () {
  int seed = 0xdeadbeef;
  rand_t gen = init_rand(seed);
  int n = (1<<15)-1;
  int num_tests = 1000;
  int[] A = alloc_array(int, n);
  int i; int j; int x; int dx;
  for (i = 0; i < n; i++) {
    A[i] = rand(gen);
  }
  for (i = 0; i < num_tests; i++) {
    j = abs(rand(gen)%n);
    assert(A[find1(A[j], A, n)] == A[j]);
    // "fail: find1 couldn't find element"
  }
  for (i = 0; i < num_tests; i++) {
    x = rand(gen);
    assert(is_in(x, A, n) || find1(seed, A, n) == -1);
    // "fail: find1 found non-existent element"
  }
  A[0] = 0;
  for (i = 0; i < n-1; i++) {
    dx = abs(rand(gen)) % (((1<<31)-1)/n);
    A[i+1] = A[i]+dx;
  }
  assert(sorted(A, n)); // "test array not sorted"
  for (i = 0; i < num_tests; i++) {
    j = abs(rand(gen))%n;
    assert(A[find2(A[j], A, n)] == A[j]);
    // "fail: find2 couldn't find element"
  }
  for (i = 0; i < num_tests; i++) {
    x = rand(gen);
    assert(is_in(x, A, n) || find2(x, A, n) == -1);
    // "fail: find2 found non-existent element"
  }
  for (i = 0; i < num_tests; i++) {
    j = abs(rand(gen))%n;
    assert(A[find3(A[j], A, n)] == A[j]);
    // "fail: find3 couldn't find element"
  }
  for (i = 0; i < num_tests; i++) {
    x = rand(gen);
    assert(is_in(x, A, n) || find3(x, A, n) == -1);
    // "fail: find3 found non-existent element"
  }
  for (i = 0; i < num_tests; i++) {
    j = abs(rand(gen))%n;
    assert(A[find4(A[j], A, n)] == A[j]);
    // "fail: find4 couldn't find element"
  }
  for (i = 0; i < num_tests; i++) {
    x = rand(gen);
    assert(is_in(x, A, n) || find4(x, A, n) == -1);
    // "fail: find4 found non-existent element"
  }
  println("Passed all tests!");
  return 0;
}
