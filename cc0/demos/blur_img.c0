/* Blur filter leaves border intact */

void pixelate (int[] A, int[] B, int width, int height, int blocksize)
//@requires width*height <= \length(A);
//@requires width*height <= \length(B);
{
  int i; int j; int di; int dj;
  for (j = 0; j < height; j += blocksize) {
    for (i = 0; i < width; j += blocksize) {
      int sum = 0;
      int count = 0;
      int average;
      for (dj = 0; dj < blocksize; dj++) {
        for (di = 0; di < blocksize; di++) {
          if (j+dj < height && i+di < width) {
            sum = sum + A[(j+dj)*width+(i+di)];
            count = count + 1;
          } // else ignore
        }
      }
      average = sum/count;
      for (dj = 0; dj < blocksize; dj++) {
        for (di = 0; di < blocksize; di++) {
          B[j*width+i] = average;
        }
      }
    }
  }
}

void filter (int[] A, int[] B, int width, int height, int[] F, int n)
//@requires \length(A) >= width*height;
//@requires \length(B) >= width*height;
//@requires \length(F) >= n*n;
//@requires n % 2 == 1; // n must be odd
{
  int i; int j; int di; int dj;
  int n2 = n/2;
  for (j = 0; j < height; j++)
    //@loop_invariant 0 <= j && j <= height;
    {
    for (i = 0; i < width; i++)
      //@loop_invariant 0 <= i && i <= width;
      {
      int sum = 0;
      int normalizer = 0;
      for (dj = -n2; dj < n-n2; dj++)
        //@loop_invariant 0 <= dj+n2 && dj+n2 <= n;
        {
          for (di = -n2; di < n-n2; di++)
            //@loop_invariant 0 <= di+n2 && di+n2 <= n;
            { if (0 <= j+dj && j+dj < height
                  && 0 <= i+di && i+di < width) {
                // ignore mask items outside array
                int multiplier = F[(dj+n2)*n+(di+n2)];
                normalizer += multiplier;
                sum += multiplier * A[(j+dj)*width+(i+di)];
              }
            }
        }
        assert(normalizer != 0, "ill-formed mask");
        B[j*width+i] = sum/normalizer;
      }
    }
}


void blur (int[] A, int[] B, int width, int height)
//@requires \length(A) >= width*height;
//@requires \length(B) >= width*height;
{
  int i; int j;
  j = 0;
  for (i = 0; i < width; i++)
    //@loop_invariant j == 0 && 0 <= i && i <= width;
    B[j*width+i] = A[j*width+i];
  for (j = 1; j < height-1; j++)
    //@loop_invariant 1 <= j && j <= height-1;
    {
      i = 0;
      B[j*width+i] = A[j*width+i];
      for (i = 1; i < width-1; i++)
        //@loop_invariant 1 <= i && i <= width-1;
        {
        B[j*width+i] =
          (5*A[j*width+i]
           + A[(j-1)*width+i] + A[(j+1)*width+i]
           + A[j*width+(i-1)] + A[j*width+(i+1)])/9;
        }
      //@assert i == width-1;
      B[j*width+i] = A[j*width+i];
    }
  //@assert j == height-1;
  for (i = 0; i < width; i++)
    //@loop_invariant 0 <= i && i <= width;
    B[j*width+i] = A[j*width+i];
}

int main() {
  image_t source;
  image_t dest;
  int width;
  int height;
  int[] A;
  int[] B;
  string *output = alloc(string);
  string *input = alloc(string);
  string *type = alloc(string);
  int *blocksize = alloc(int);
  int *filterSize = alloc(int);
  string[] args;

  args_string("-o", output);
  args_string("-i", input);
  args_string("-t", type);
  *type = "blur";

  // Block size for pixelate
  args_int("-b", blocksize);
  *blocksize = 3;

  // Filter size for filter
  args_int("-n", filterSize);
  *filterSize = 3;

  args = args_parse();

  if (string_equal("",*output))
    *output = string_join(*type, string_join("_", *input));

  source = image_load(*input);
  dest = image_create(image_width(source), image_height(source));
  print("Loaded image. Dimensions are ");
  printint(image_width(source));
  print(" by ");
  printint(image_height(source));
  println("");
  A = image_data(source);
  B = image_data(dest);
  if (string_equal("blur", *type)) {
    blur(A, B, image_width(source), image_height(source));
  } else if (string_equal("pixelate", *type)) {
    pixelate(A, B, image_width(source), image_height(source), *blocksize);
  } else if (string_equal("generic", *type)) {
    int i;
    int filterlen = *filterSize * *filterSize;
    int[] values = alloc_array(int, filterlen);
    for (i = 0; i < filterlen; i++) {
      struct parsed_int *result = parse_int(args[i], 10);
      assert (result->parsed, "Invalid filter string");
      values[i] = result->value;
    }
    filter(A, B, image_width(source), image_height(source), values, *filterSize);
  } else {
    println(string_join("Unknown filter type: ", *type));
  }

  image_save(dest, *output);
  image_destroy(dest);
  image_destroy(source);
  return 0;
}

