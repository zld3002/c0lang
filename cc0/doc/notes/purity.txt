Purity checking for annotations
Jason Koenig, Karl Naden, Frank Pfenning
Transcribed by fp, Sun Feb 13, 2011

Currently, annotations in C0 can contain arbitrary functions.  This
note is the design of a system for checking purity of functions to
avoid certain classes of errors in writing annotations, specifically,
those that might lead to different behavior with and without dynamic
checking.

Limits: Nonterminating annotations are allowed.
Exceptions: Exceptions are allowed.
Input/Output: may be allowed.  It depends on the purity
  attributes of the corresponding library functions.

What should be ruled out, in a sound way, are modifications to memory
that existed before the annotation funcs are called.

As usual, the solution should be a simple as possible while allowing
the kind of annotations that we would naturally write.  If at all
possible it should be intra-procedural rather than a global analysis.

In section 1 we describe a refined type system that tracks
multability of memory locations.  The intent is to do inference
with respect to this type system without user declarations.

Tracking Mutability
===================

All types that refer to memory are tagged with a flag, either
"i" (for immutable) or "m" (for mutable).  We write "p" for
an arbitrary protection tag.

types t ::= int | bool | string | char | (p)t* | (p)t[] | struct s | a
tag p ::= i | m

In the typing rules, we have to distinguish lvalues lv from
expressions e.  As a reminder (where $ is an arbirary binary
operator; unary operators are similar):

e ::= c | e1 $ e2 | e1 ? e2 : e3
    | x | g(es) | e.f | e1[e2] | *e | e->f
    | alloc(t) | alloc_array(t, e)

lv ::= x | *lv | lv[e] | lv.f | lv->f

The judgments are

e : t  - expression e has type t
lv :p t  - lvalue lv denotes a location of permission p and type t

Expressions (e : t)
===================

Most of the rules for expressions do not change.  For example

e1 : bool
e2 : t
e3 : t
------------------
(e1 ? e2 : e3) : t

Defined type names are transparent, so we can replace any
occurrence of a type name by its definition.

e : t(a)
typedef t' a
------------
e : t(t')

We have two general inclusions regarding permissions: an expression
that is a pointer or array to mutable memory can be treated as if it
were immutable.  This is sound because we only remove permissions.

e : (m)t*
---------
e : (i)t*

e : (m)t[]
----------
e : (i)t[]

Rules that read memory just ignore permissions.  For example, for
arrays we have

e1 : (p)t[]
e2 : int
-----------
e1[e2] : t

Allocation can return mutable or immutable references - the type
discipline does not specify this.  However, since mutable
references can always be treated as immutable ones using the
general type conversion, we can just stipulate that they
are mutable without contradiction.

-----------------
alloc(t) : (m)t*

e : int
-------------------------
alloc_array(t,e) : (m)t[]


Lvalues (lv :p t)
=================
Typing for lvalues is trickier - they are used on the left-hand side
of assignments, so this is where the permissions are enforced.

Variables are always mutable, since variables denote local storage
in a function.  We write "t x" if x has been declared with type t
(for the current scope, as usual).

t x
--------
x :m t

A location denoted by a pointer gets its permission from the
type of the pointer.  The permission "q" in the premise is
irrelevant.

lv :q (p)t*
-----------
*lv :p t

lv :q (p)t[]
e : int
------------
lv[e] :p t

To get to struct fields we must follow a pointer or array reference,
and the fields inherit their permission from them.  We compute the
type of a struct field by a table lookup (written as s.f for a struct
named s with field f).

lv :p struct s
s.f : t
-------------
lv.f :p t


Statements
==========

From the perspective of checking permissions, the only interesting
statements are assignments.  Checking any other kind of statment
works just as before.  For assignment, we have to verify the location
denoted by lv is mutable (lv :m t).

lv :m t
e : t
-----------
lv = e stmt


Global Declarations
===================

Every function has a purity attribute which is computed when the
definition of the function is first encountered.  We trust the purity
attribute of external library functions.  Once purity has been
established, it is stored with the function.

When checking if a function is pure, all parameter types, types
occurring in parameter types, and even types occurring struct fields
occurring in parameter types, etc. must contain only immutable tags
(i).  In that way, any memory that existed before the function was
called is protected from mutation.  This monomorphic view of
permissions may be too restrictive, but we should gather some data on
this.  When we encounter a function that has been declared but not yet
defined (e.g., for mutual recursion) we flag it as having to be pure.
That will finally be checked when we encounter the definition.

While checking a function, we verify that all function calls in
annotations are pure.  If not, we issue a warning (and possibly
an error).

Since local type declarations in a function are not annotated, but
should do permission inference.  It appears that simply creating fresh
permission variables for each pointer and array type and determining
their values by a constraint satisfaction process similar to
unification might work.
