Abstract syntax:
t ::= int | bool | string | char
    | t* | t[] | struct s | void | a
e ::= x | w | "s" | 'c' | true | false | null
    | unop(e) | binop(e1,e2) | cond(e1,e2,e3)
    | e.f | *e | e1[e2] | g(e1,...,en) | alloc(t) | alloc_array(t,e)
    [ \result | \length(e) | \old(e) ]
s ::= l op= e | e | (s1;s2) | (d; s) | if(e1,s2,s3)
    | while(e,s) | for(s1,e2,s3,s4) | continue | break
    | return(e) | return | assert(e1,e2)
    [ anno(p) ]
l ::= l.f | *e | e1[e2] | e->f
d ::= t x | t x = e

e => i1,...,in    S -> S, v  if e ==> v
l ~> i1,...,in    S -> S, a  if l ~~> a

x => vload <vnum(x)>
w => ildc <addr(w)>
"s" => aldc <addr("s")>
'c' => bipush <'c'>
true => bipush <1>
false => bipush <0>
null => aconst_null
-e => bipush 0, is, isub if e => is
~e => bipush -1, is, ixor if e => is
!e => bipush 1, is, ixor ie e => is
eq(e1,e2) => bipush 1, is1, is2, if_cmpeq #ok, pop, bipush 0, #ok:
binop(e1,e2) => is1, is2, i<op>  if e1 => is1, e2 => is2 (boolean ops?)
cond(e1,e2,e3) => is1, if_cmpne #f, is2, goto #d, #f: is3, #d: (here: compile e1 specially!)
l.f => is, mload if l.f ~> is
*e => is, mload if *e ~> is
e1[e2] => is1, is2, aadds if e1 ~> is1, e2 => is2 
g(e1,...,en) => is1, ..., isn, invokestatic &g
alloc(t) => new <sizeof(t)>
alloc_array(t,e) => is, newarray <sizeof(t)>

[x ~> vload x (would be error - x could not point to struct)]
e->f == (*e).f
l.f ~> is, aaddf <offset(f)>, l ~> is
*e ~> is  where e => is
e1[e2] ~> is1, is2, aadds  where e1 => is1, e2 => is2

s => i1,...,in

(x = e) => is, vstore <addr(x)>
(x op= e) == (x = x op e)
(l1 = e2) => is1, is2, mstore l1 ~> is2, e2 => is2
(l1 op= e2) => is1, dup, is2, swap, mload, swap, op, mstore  l1 ~> is2, e2 => is2
(e) => is, pop
(s1;s2) => is1, is2
(d1; s1) => is1, is2
if(e1,e2,e3) => see conditional
while(e1,s2) => #loop:, is1, if_cmpne #done, is2, goto #loop, #done: (compile e1 special)
for _ => convert to while loop
continue => goto #cont
break => goto #done
return(e) => is, return
return => bipush 0, return

t x => .  (x|->nextaddr())
(t x = e) => is, vstore <addr(x)>


Conditionals:
if (e1 < e2) s1 else s2;
is1, is2, if_cmplt #t, [s2], goto #d, #t: [s1], #d

if (e1 < e2 && e3 == e4) s1 else s2
=
if (e1 < e2) { if (e3 == e4) s1 else {} } else s2

is1, is2, if_cmpge #2, is3, is4, ifcmpne #2, [s1], goto #d, [s2], #d:

if (e1 < e2 || e3 == e4) s1 else s2
==
if (e1 < e2) {} else { if (e3 == e4) s1 else {} } s2

is1, is2, if_cmp

if (!e) s1 else s2
==
if (e) s2 else s1

is1, is2, if_cmplt #t1, #f1: [s2], goto #d, #t1: is3, is4, if_cmpeq #t2, goto #f1, [s1], #d: 
