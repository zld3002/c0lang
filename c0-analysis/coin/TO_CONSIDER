cc0main - little endian versus big endian output considerations?

- Revisit the abstraction for the test infrastructure
  * Less copying?
  * c0vm-test
  * cc0-test
  * coin-test

- Build process for libraries is broken: doesn't load stuff into c0/lib where
  it's expected to be. This is probably moving something from Makefile into 
  lib.mk in a relatively sane way.

- Things we need to generate from a .h0 file
  * A .h file <-- this should be easy, it's the vm/*.h0 file
    - What are the requirements for these .h files?
    - Do we want to enforce them with #include, or do we want to just say
      that we will have to load them in the appropriate environment of 
      previous #includes
    - Can we fold the .h file into the related .c file???
    - Probably not; we actually need to be generating .h files! See, for
      example, the fact that we're getting away with murder by including
      parse.h0 in the parse.h file which is then used in args.cpp; the more
      appropriate solution seems to be to generate parse.h in the libs/parse
      directory from the parse.h0 file.
  * Where should the .h files go to? c0/include?
  * Generate the gluey (void *)_c0i_foo(void**) from foo()
    - GLUE IS ONLY 32 BIT (this nees to be documented)
    - Do the prototypes for this also need to be put in the .h files?
    - Dealing with the dependencies: c0_array, c0_string, etc are considerations

- Is the use of string in c0vm_natives correct? Is the use of arrays? 
  * William, please answer
  * Note, we're using c0_string_tocstr here and not elsewere. Why?

- Generating in the current coin regime
  * Generate GLOBAL c0i.sml (compiler/c0vm/c0vm-native.sml)
  * Generate GLOBAL c0i.h / c0i.c (vm/c0vm_natives.h / vm/c0vm_natives.c) 
    - c0vm_natives.h
      * #defines are the same
      * Basically, that's all there is in this file, other than that
        I've got this crazy-ass typedef for what a native_fn is.
    - c0vm_natives.c
      * This is what I've been working on
      * The list of primary #includes will be including from the 
        generated c0/include/*.h files. 
  * How do I deal with c0_abort? Should it stay a native function at all?

- Generalizing the current coin/c0vm regime
  * Make the magic funciton table lookup a function, not an array, for
    the possibility of more general stuff in the future.

SUMMER STRATEGY
===============
 1 - Generate VM code (32 bit only)
 2 - Fork Coin, get 32-bit interface to work with Coin
 3 - Generate 64-bit (anything else?) c/h files, integrate into coin, merge
 