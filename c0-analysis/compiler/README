(* README
 * Author: Frank Pfenning <fp@cs.cmu.edu>
 *)

To generate compiler, you will need Standard ML (see below)

% make                    # make compiler
% bin/cc0-sml -h          # show usage
% bin/cc0-sml -v -r bare sample/mergesort.c0
                          # test on file mergesort.c0
./a.out                   # run test programs

-----------------------------------------------------------------------
SML Notes
-----------------------------------------------------------------------
There are many different compilers for SML, perhaps the most
popular ones are

  SML/NJ  -- http://www.smlnj.org/
  MLton   -- http://www.mlton.org/
  Poly/ML -- http://www.polyml.org/

The code should compile in SML/NJ v110.59, v110.67 and v110.69.
sml is assumed to be invoked with "sml".

For (almost universal) Standard Basis Libraries, see
http://www.standardml.org/Basis/index.html.  Further resources, such
as documentation for ML-Lex and ML-Yacc, and documentation for the SML/NJ
specific libraries which are used in the starter code, can be found at

  http://www.cs.cmu.edu/~fp/courses/15411-f09/resources.html

------------------------------------------------------------------------
Source Files
------------------------------------------------------------------------
The following are the source files for the L1 compiler

README               -- this file

Makefile             -- makefile for the compiler
                        For a quick test

    % make cc0          (generates file bin/l1c.heap.<os-tag>)
    % bin/cc0 --verbose sample/mergesort.c0

                        should generate generate sample/mergesort.c

    % make clean        (removes generated files)
    % make TAGS         (creates file TAGS, for Emacs tags commands)

compile-cc0.sml      -- SML commands that will create bin/l1c.heap.<os-tag>
bin/cc0              -- the script that will run the exported SML heap

sources.cm           -- lists all source files, including libraries,
                        and lexer and grammar specifications
                        For a quick test

    % sml
    - CM.make "sources.cm";
    - Top.test "--verbose sample/mergesort.c0";

                        should generate sample/mergesort.c

ast/ast.sml           -- abstract syntax

parse1 is obsolete, use handwritten lexer and parser

parse3               -- handwritten lexer and parser
parse3/stream.sml    -- simple non-memoizing streams
parse3/terminal.sml  -- terminal symbols
parse3/parsestate.sml -- parser state for giving error messages
parse3/lex.sml       -- C0 lexer
parse3/parse.sml     -- C0 parser
parse3/parse-pragma.sml -- #<pragma> parser

type/symtab.sml      -- symbol tables used by compiler
type/typechecker.sml -- static semantics (type-checker) for AST
type/syn.sml         -- type synthesis for well-typed programs
type/dyn-check.sml   -- program transformation to enable dynamic checking
type/print-c-compact.sml -- printing to C after type-checking (default for parse3)
type/print-c.sml     -- printing to C after type-checking (old-fashioned)
type/print-csharp.sml -- printing to C#

c0vm/                -- files for printing to c0vm

util/errormsg.sml    -- error message utilities
util/flag.sml        -- library for defining flags
util/mark.sml        -- library for tracking source file positions
util/safe-io.sml     -- I/O utilities
util/symbol.sml      -- symbol table library
util/word32.sml      -- machine word utilities for two's complement interpretation
util/char.sml        -- C0 characters (as restricted from C characters)

top/flags.sml        -- flags for calling cc0 and coin
top/top.sml          -- top level function for export to C and testing
top/cstop.sml        -- a modified top level that produces C# code and exe files
top/go.sml           -- structure for building mlton standalone images
top/buildid.sml      -- building an id for an executable
