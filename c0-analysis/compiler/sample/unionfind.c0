//test return 1

typedef struct ufs* ufs;
struct ufs {
  int size;
  int[] A;
};

bool elem(ufs eqs, int i) {
  return 0 <= i && i < eqs->size;
}

bool root(ufs eqs, int i)
//@requires elem(eqs, i);
{
  return eqs->A[i] < 0;
}

bool depth_bounded(ufs eqs, int i)
//@requires elem(eqs, i);
{
  int[] A = eqs->A;
  int j = i;
  int d = 1;
  while (A[j] >= 0) {
    d++;
    j = A[j];
  }
  return A[j] <= -d;
}


bool valid_ufs (ufs eqs)
//@requires 0 <= eqs->size && eqs->size <= \length(eqs->A);
{
  int size = eqs->size;
  int[] A = eqs->A;
  int i;
  for (i = 0; i < size; i++) {
    if ((0 <= A[i] && A[i] < size) /* not root of eq class */
	|| (-size <= A[i] && A[i] < 0)) /* root with depth bound for eq class */
      {} /* ok */
    else return false; 		/* index out of range */
  }
  for (i = 0; i < size; i++)
    if (!depth_bounded(eqs,i))
      return false;
  return true;
}

ufs singletons (int n)
//@requires 0 <= n;
//@ensures valid_ufs(\result);
{
  int i;
  int[] A = alloc_array(int, n);
  ufs eqs = alloc(struct ufs);
  for (i = 0; i < n; i++) {
    A[i] = -1;
  }
  eqs->size = n;
  eqs->A = A;
  return eqs;
}

int find (ufs eqs, int i)
//@requires elem(eqs, i);
//@requires valid_ufs(eqs);
//@ensures valid_ufs(eqs);
//@ensures elem(eqs, \result);
//@ensures root(eqs, \result);
 {
  int[] A = eqs->A;
  int j = i;
  while (A[j] >= 0) {
    j = A[j];
  }
  if (i != j) A[i] = j;		/* path compression */
  return j;
}

int union (ufs eqs, int i, int j)
//@requires elem(eqs, i);
//@requires elem(eqs, j);
//@requires valid_ufs(eqs);
//@ensures valid_ufs(eqs);
//@ensures find(eqs, i) == find(eqs, j);
{
  int iclass = find(eqs, i);
  int jclass = find(eqs, j);
  int[] A = eqs->A;
  if (iclass == jclass) return iclass;
  if (A[iclass] < A[jclass]) {  /* i has greater depth */
    A[jclass] = iclass;		/* depth remains the same */
    return iclass;
  } else if (A[iclass] == A[jclass]) {
    A[jclass] = iclass;		/* direction is arbitrary */
    A[iclass]--;		/* depth increases by one */
    return iclass;
  } else {			/* j has greater depth */
    A[iclass] = jclass;		/* depth remains the same */
    return jclass;
  }
}

/*
void pi(string s, int i, int Ai) {
  print(s);
  print("A[");
  printint(i);
  print("]=");
  printint(Ai);
  print("\n");
}

void print_ufs(ufs eqs) {
  int[] A = eqs->A;
  int i;
  for (i = 0; i < eqs->size; i++)
    pi("", i, A[i]);
  print("----------\n");
}
*/
/* for regression testing, do not insist on printing for now */
void print_ufs(ufs eqs) {}

int main () {
  bool ok;
  ufs eqs = singletons(10);
  union(eqs,0,1); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 1");
  union(eqs,2,3); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 2");
  union(eqs,3,4); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 3");
  union(eqs,5,6); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 4");
  union(eqs,4,0); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 5");
  ok = find(eqs,0)==find(eqs,4) && find(eqs,6)!=find(eqs,2);
  eqs = singletons(3);
  union(eqs,0,1); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 6");
  union(eqs,1,2); print_ufs(eqs); assert(valid_ufs(eqs), "invalid 7");
  ok = ok && find(eqs,0) == find(eqs,1) && find(eqs,1) == find(eqs,2);
  return ok ? 1 : 0;
}
