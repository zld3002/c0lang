/*
  Some simple modular bit arithmetic
  Frank Pfenning, Fall 2010

  These functions allocate a lot of temporary space,
  relying on the garbage collector, for simplicity
*/

// next two lines are presently ignored
// use % cc0 -lstring -lconio -d arith.c0
#include <string.h0>
#include <conio.h0>

typedef int bit;  /* bit: 0 or 1 */

bool is_bit(int n) {
  return (n == 0 || n == 1);
}

/* is_num(x,n) == true iff x is a bitstring of precision n */
bool is_num (bit[] x, int n)
//@requires n == \length(x);
{
  int i;
  for (i = 0; i < n; i++)
    if (!is_bit(x[i])) return false;
  return true;
}

/* equal(x, y, n) == true iff x and y are bitwise */
/* equal bitstrings of precision n */
bool equal (bit[] x, bit[] y, int n)
//@requires is_num(x, n) && is_num(y, n);
{
  int i;
  for (i = 0; i < n; i++)
    if (x[i] != y[i]) return false;
  return true;
}

/* Binary addition mod 2^n */
bit[] plus(bit[] x, bit[] y, int n)
//@requires is_num(x,n) && is_num(y,n);
//@ensures is_num(\result,n);
{ int i;
  bit[] result = alloc_array(bit, n);
  bit carry = 0;
  for (i = 0; i < n; i++)
    //@loop_invariant is_bit(carry);
    {
      result[i] = (x[i] ^ y[i]) ^ carry;
      carry = (x[i] & y[i])
	    | (x[i] & carry)
            | (y[i] & carry);
    }
  // last carry is overflow bit; ignore
  return result;
}

/* Left shift by k bits, filling with 0's */
/* Implements multiplication by 2^k */
/* k is masked to n bits */
bit[] shift_left(bit[] x, int n, int k)
//@requires k >= 0;
//@requires is_num(x,n);
//@ensures is_num(\result,n);
{ int i;
  bit[] result = alloc_array(bit, n); /* initialized to 0's */
  // exploit that result[0..k-1] == 0;
  for (i = 0; i < n-k; i++)
    //@loop_invariant k <= i+k && i+k <= n;
    result[k+i] = x[i];
  return result;
}

/* Arithmetic right shift by k bits */
/* fills with sign bit */
/* Implements integer division by 2^k */
bit[] shift_right(bit[] x, int n, int k)
//@requires k >= 0;
//@requires is_num(x,n);
//@ensures is_num(\result,n);
{ int i;
  bit[] result = alloc_array(bit, n);
  for (i = 0; i < n-k; i++)
    //@loop_invariant k <= i+k && i+k <= n;
    result[i] = x[i+k];
  // arithmetic right shift: copy highest bit
  for (i == n-k; i < n; i++)
    //@loop_invariant n-k <= i && i <= n;
    result[i] = x[n-1];
  return result;
}

/* Multiplication mod 2^n */
bit[] times(bit[] x, bit[] y, int n)
//@requires is_num(x,n) && is_num(y,n);
//@ensures is_num(\result,n);
{ int i;
  bit[] result = alloc_array(bit, n); // init'd to all 0
  bit[] summand = y;
  for (i = 0; i < n; i++)
    // invariant: summand = y*2^i
    //@loop_invariant equal(summand, shift_left(y, n, i), n);
    //@loop_invariant 0 <= i && i <= n;
    {
      if (x[i] == 1) result = plus(result, summand, n);
      summand = shift_left(summand, n, 1);
    }
  return result;
}

string num2string (bit[] x, int n)
//@requires is_num(x,n);
{
  int i; 
  string s = "";
  for (i = 0; i < n; i++) {
    s = string_join(string_fromint(x[i]),s);
  }
  return s;
}

/* Pack bit array into an integer array */
int[] num2ints (bit[] x, int n)
//@requires is_num(x,n);
//@requires n % 32 == 0;  /* for two's complement correctness */
{
  int i;
  int[] result = alloc_array(int, (n-1)/32+1);
  /* array is initialized to all 0's */
  for (i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant 0 <= i/32 && i/32 < (n-1)/32;
    result[i/32] |= (x[i]<<(i%32));
  return result;
}

/* Spread integer array into bit array */
bit[] ints2num (int[] x, int n)
//@requires n == \length(x);
//@ensures is_num(\result, n*32);
{
  int i;
  bit[] result = alloc_array(bit, n*32);
  for (i = 0; i < n*32; i++)
    //@loop_invariant 0 <= i && i <= n*32;
    //@loop_invariant 0 <= i/32 && i/32 <= n;
    result[i] = (x[i/32]>>(i%32)) & 1;
  return result;
}

/* Convert a single int into bit array */
/* sign-extends negative ints */
/* loop invariant is complicated since >>k masks k to 5 bits */
bit[] int2num (int k, int n)
//@requires n >= 0;
//@ensures is_num(\result,n);
{ int i; int j = k;
  bit[] x = alloc_array(bit, n);
  for (i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    /*@loop_invariant
      (i < 32 && j == k>>i)
      || (i >= 32 && k >= 0 && j == 0)
      || (i >= 32 && k < 0 && j == -1); @*/
    {
      x[i] = j & 1;
      j = j >> 1;
    }
  return x;
}

/* some weakly pseudo-random numbers */
int some(int i) {
  int z = 36969 * (i & 65535) + (i >> 16);
  int w = 18000 * (i & 65535) + (i >> 16);
  return (z << 16) + w;
}

string hexdigit(int i)
//@requires 0 <= i && i <= 0xF;
{
  if (0 <= i && i <= 9)
    return string_fromint(i);
  else if (i == 0xA) return "A";
  else if (i == 0xB) return "B";
  else if (i == 0xC) return "C";
  else if (i == 0xD) return "D";
  else if (i == 0xE) return "E";
  else if (i == 0xF) return "F";
  else return "?";
}

string hex(int n) {
  int j = n; string result = "";
  int i; 
  for (i = 0; i < 32/4; i++) {
    result = string_join(hexdigit(j & 0xF), result);
    j = j>>4;
  }
  return string_join("0x", result);
}

/* one simple test: construct a large number */
/* and its negation and compare results of   */
/* squaring both                             */

int main () {
  int n = 33;			/* precision = 32*33 bits */
  bit[] x; bit[] y; bit[] z;
  int[] k = alloc_array(int, n);
  int i;
  // set k to some big number h
  k[0] = some(276847) & 0x7fffffff;
  println(hex(k[0]));
  // printint(k[0]); print("\n");
  assert(k[0] > 0, "illegal pseudo-random number");
  for (i = 1; i < n; i++) {
    k[i] = some(k[i-1]);
    println(hex(k[i]));
    // printint(k[i]); print("\n");
  }
  x = ints2num(k, n);		/* x = h, in bits */
  y = times(x, x, 32*n);	/* y = h * h */
  // set k to -h
  k[0] = -k[0];
  for (i = 1; i < n; i++)
    k[i] = ~k[i];
  x = ints2num(k, n);		/* x = -h, in bits */
  z = times(x, x, 32*n);	/* y = (-h)*(-h) */
  assert(equal(y, z, 32*n), "error: (-h)*(-h) != h*h");
  println("ok: (-h)*(-h) == h*h");
  return 0;
}
