C0 Language Notes
December 20 & 21, 2010
William Lovas, Anand Subramanian, Frank Pfenning

Discussion to learn lessons from Fall 2010 use of C0 in 15-122 class
and prepare Spring 2011 version. Also took into account compiler
course (15-411) results from Fall 2010 version taught by Andre
Platzer, with TAs Anand Subramanian and Nathan Snyder.

1. General impressions
2. cc0 compiler bugs and spec updates
3. C0 revisions

1. General impressions

The language seemed to hold up well to the pressure of the course, as did the
language implementation.  Syntax error reporting was atrocious, but very few
(2-3) actual bugs were noticed by the 15-122 students.  The compiler course
uncovered a couple more.  Pedagogically, it seemed to achieve its stated
goals.  No major gaps in the language stood in the way of achieving these,
and there was not much in the language that could be comfortable left out.
Specific comments on the items below.

2. cc0 compiler bugs

+ (fix) C0 -> C compiler generates some code with undefined
  behavior that should be fixed, specifically on arithmetic
  operations.  FIXED 1/1/2011; reliable only in -O0
+ (fix) contracts for function declarations are not checked.
  Collect all contracts for a function and generate one wrapper
  to check the contracts in -d mode, ignore otherwise.  Furthermore,
  pass caller location to contract function for error messages.
  Name prefix must be unique to avoid collision.   Standard libraries
  and sample code should use contracts at interfaces.
  NEW IDEA (1/1/2011), implemented (1/6/2011)
  Each declaration calls the previous declaration; first one
  calls the definition, whereever it may be?  Function definition
  calls only itself.  In -d mode, every declaration generates
  a stub that calls previously declared or eventually to be
  defined version.  So, with -d:
  int f ();
  int f () { b(f); }
  int g { b(f) }
  int f();
  int h { b(f) }
  becomes
  int f(); /* fwd decl, so next line checks */
  int f_1 () { f() } /* keep a "current" version of f */
  int f() { b(f_1) }
  int g { b(f_1) }
  int f_2() { f_1() }
  int h { b(f_2) } /* subst only with -d, otherwise b(f) */
+ (fix) reference implementation does not always evaluate lhs's
  correctly.  The syntax:
    lv ::= x | lv[e] | *lv | lv.f | lv->f
  used in
    lv <op>= e | lv++ | lv--
  lv evaluates to an address a (possibly 0).  For an assignment
    lv = e
  we evaluate lv to a, then e to v, then store M[a] = e if M[a] valid.
    A[-1] = 1/0; yields SIGSEGV
    p->f = 1/0; yields SIGSEGV (if p = NULL)
    *p = 1/0; yiels SIGFPE if (p = NULL)
  FIXED 12/29/2010
+ (fix) cc0 -b file.c0 could generate file.bc0, but not a.out
  cc0 -b file.c0 -o outfile should generate outfile, but not a.out
  FIXED 1/6/2011
+ (already fixed) C0 -> C compiler treated booleans as taking 4 bytes
  while the current runtimes make it 1 byte wide (as per <stdbool.h>).
+ (update 15-122 C0 spec and implementation)
  The C0 spec should be clear about whether the static semantics
  needs to check dead code.  The example is whether variables are
  initialized before use.  The funtion
    int main() { return 0; int y; return y; }
  should fail to check even though the use of y is unreachable.
  At some point the 15-122/15-411 wires were crossed.
  FIXED 1/1/2011
+ (update C0 -> C0VM compiler)
  Pointer equality and inequality need to generate if_acmpeq and if_acmpne.
  FIXED: should be unified into if_cmp; the difference doesn't make much sense
    in the context of the current compiler
  Also, conditionals and loops should generate more intuitive code.
  TODO: improve code generation at some point
+ (update cc0, documentation; update 15-411 spec?)
  Which conditions raise which excepction:
  o memory-related conditions raise SIGSEGV; with p = NULL, n = \length(A)
    *p, A[-1], A[n], p->f, alloc_array(t,-1)
    out of memory, stack overflow
  o assert raises SIGABRT
  o timeout raises SIGALRM
  o div and mode raise SIGFPE
  There should be no test for infinite recursion because it will
  be a race between SIGALRM and SIGSEGV
+ (note) declarations are not recursive (e.g., int x = x; or int x = x+1; fail)
+ (fix) empty structs are handled incorrectly in the c0rt; it should
  just call calloc, possibly with a non-zero size to guarantee
  generativity (C99 standard says NULL or generative - I guess we
  would die explicitly if alloc returns NULL, so that would be bad)
? (find and fix) There are three name spaces: struct names, field names,
  and variable/function/type names.  In all, multiple consistent global declarations
  are allowed, but at most one definition.  Local variables and parameters
  can shadow global functions, but not type names.
  There may still be a bug lurking in the C0 compiler.

3. C0 revisions

+ declarations and statements should be interchangeable.  Moreover,
  the "init" part of a for loop should be allowed to be a declaration.
  The grammar should now read:

  <stmt> ::= <simple> ; | .... | { <stmt>* }
  <simple> ::= <lv> [<op>]= <exp> | <lv> ++ | <lv> -- | <exp>
             | <tp> <vid> [= <exp>]

  There is no separate production for <body> any more.
+ assert should be unary.  During compilation, an internal function
  _internal_assert will be substituted which has source information.
  A two-place assert-like function can be defined, e.g.
  void test(bool c, string msg) {
    if (!c) { print(msg) ; assert(false); }
  }
  although this will print a spurious message (but see note
  on abort() below)
- add
  <stmt> ::= .. | do <stmt> while(<exp>);
  OMITTED FOR NOW (1/6/2011)
  where do loop invariants go?

Q: define abort() (as in C) to raise SIGABRT?
Q: should some library functions (like print, abort) be always
   available? second thoughts about asserts because alternatives would
   requires libraries, at least under the old way
   also, assert is the only envisioned change that
   wouldn't be backward compatible in practice
Q: we may want to introduce warnings, at least for
   o unreachable code
   o unused variables?
   because they often indicate bugs.  Should that require a flag (-w)?
   What about legitimate patterns with unused variables?
Q: annotations can now qualify declarations; can they occur at
   the end of blocks?  I think this will create problems grammatically
   because of loops (and loops with a single statement body)
