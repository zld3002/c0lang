/* Blur filter leaves border intact */

/* void assert(bool b, string msg); */

int[] pixelate (int[] A, int width, int height, int blocksize)
//@requires width*height <= \length(A);
//@ensures \length(\result) == width*height;
{
  int i; int j; int di; int dj;
  int[] B = alloc_array(int, width*height);
  for (j = 0; j < height; j += blocksize) {
    for (i = 0; i < width; j += blocksize) {
      int sum = 0;
      int count = 0;
      int average;
      for (dj = 0; dj < blocksize; dj++) {
	for (di = 0; di < blocksize; di++) {
	  if (j+dj < height && i+di < width) {
	    sum = sum + A[(j+dj)*width+(i+di)];
	    count = count + 1;
	  } // else ignore
	}
      }
      average = sum/count;
      for (dj = 0; dj < blocksize; dj++) {
	for (di = 0; di < blocksize; di++) {
	  B[j*width+i] = average;
	}
      }
    }
  }
  return B;
}

int[] filter (int[] A, int width, int height, int[] F, int n)
//@requires \length(A) >= width*height;
//@requires \length(F) >= n*n;
//@requires n % 2 == 1; // n must be odd
{
  int i; int j; int di; int dj;
  int n2 = n/2;
  int[] B = alloc_array(int, width*height);
  for (j = 0; j < height; j++)
    //@loop_invariant 0 <= j && j <= height;
    {
    for (i = 0; i < width; i++)
      //@loop_invariant 0 <= i && i <= width;
      {
      int sum = 0;
      int normalizer = 0;
      for (dj = -n2; dj < n-n2; dj++)
	//@loop_invariant 0 <= dj+n2 && dj+n2 <= n;
	{
	  for (di = -n2; di < n-n2; di++)
	    //@loop_invariant 0 <= di+n2 && di+n2 <= n;
	    { if (0 <= j+dj && j+dj < height
		  && 0 <= i+di && i+di < width) {
		// ignore mask items outside array
		int multiplier = F[(dj+n2)*n+(di+n2)];
		normalizer += multiplier;
		sum += multiplier * A[(j+dj)*width+(i+di)];
	      }
	    }
	  assert(normalizer != 0); // "ill-formed mask"
	  B[j*width+i] = sum/normalizer;
	}
      }
    }
  return B;
}


int[] blur (int[] A, int width, int height)
//@requires \length(A) >= width*height;
{
  int i; int j;
  int[] B = alloc_array(int, width*height);
  j = 0;
  for (i = 0; i < width; i++)
    //@loop_invariant j == 0 && 0 <= i && i <= width;
    B[j*width+i] = A[j*width+i];
  for (j = 1; j < height-1; j++)
    //@loop_invariant 1 <= j && j < height-1;
    {
      i = 0;
      B[j*width+i] = A[j*width+i];
      for (i = 1; i < width-1; i++)
	//@loop_invariant 1 <= i && i <= width-1;
	{
	B[j*width+i] =
	  (5*A[j*width+i]
	   + A[(j-1)*width+i] + A[(j+1)*width+i]
	   + A[j*width+(i-1)] + A[j*width+(i+1)])/9;
	}
      //@assert i == width-1;
      B[j*width+i] = A[j*width+i];
    }
  //@assert j == height-1;
  for (i = 0; i < width; i++)
    //@loop_invariant 0 <= i && i <= width;
    B[j*width+i] = A[j*width+i];
  return B;
}

int main() {
  int i; int j;
  int width = 512;
  int height = 256;
  int[] A = alloc_array(int, width*height);
  // initialize ...
  for (j = 0; j < height; j++)
    for (i = 0; i < width; i++)
      A[j*width+i] = i+j;
  A = blur (A, width, height);
  return A[127*width+255];
}

