(* Automatically generated by bin/wrappergen
 * Do not edit this file directly! *)

structure NativeLibrary :> NATIVELIBRARY where type function = NativeFn.t =
struct

structure Map = 
SplayMapFn (struct type ord_key = string  val compare = String.compare end)

type fnptr = MLton.Pointer.t -> MLton.Pointer.t
type function = NativeFn.t
type library = function Map.map

val mapN = List.map (fn (x, y) => (x, NativeFn.Native y))

(* Library args *)
val lib_args = List.foldr Map.insert' Map.empty (mapN (
("args_flag",            _import "__c0ffi_args_flag": fnptr;) ::
("args_int",             _import "__c0ffi_args_int": fnptr;) ::
("args_parse",           _import "__c0ffi_args_parse": fnptr;) ::
("args_string",          _import "__c0ffi_args_string": fnptr;) ::
[]))

(* Library conio *)
val lib_conio = List.foldr Map.insert' Map.empty (mapN (
("error",                _import "__c0ffi_error": fnptr;) ::
("print",                _import "__c0ffi_print": fnptr;) ::
("printbool",            _import "__c0ffi_printbool": fnptr;) ::
("printchar",            _import "__c0ffi_printchar": fnptr;) ::
("printint",             _import "__c0ffi_printint": fnptr;) ::
("println",              _import "__c0ffi_println": fnptr;) ::
("readline",             _import "__c0ffi_readline": fnptr;) ::
[]))

(* Library curses *)
val lib_curses = List.foldr Map.insert' Map.empty (mapN (
("c_addch",              _import "__c0ffi_c_addch": fnptr;) ::
("c_cbreak",             _import "__c0ffi_c_cbreak": fnptr;) ::
("c_curs_set",           _import "__c0ffi_c_curs_set": fnptr;) ::
("c_delch",              _import "__c0ffi_c_delch": fnptr;) ::
("c_endwin",             _import "__c0ffi_c_endwin": fnptr;) ::
("c_erase",              _import "__c0ffi_c_erase": fnptr;) ::
("c_getch",              _import "__c0ffi_c_getch": fnptr;) ::
("c_initscr",            _import "__c0ffi_c_initscr": fnptr;) ::
("c_keypad",             _import "__c0ffi_c_keypad": fnptr;) ::
("c_move",               _import "__c0ffi_c_move": fnptr;) ::
("c_noecho",             _import "__c0ffi_c_noecho": fnptr;) ::
("c_refresh",            _import "__c0ffi_c_refresh": fnptr;) ::
("c_subwin",             _import "__c0ffi_c_subwin": fnptr;) ::
("c_waddch",             _import "__c0ffi_c_waddch": fnptr;) ::
("c_waddstr",            _import "__c0ffi_c_waddstr": fnptr;) ::
("c_wclear",             _import "__c0ffi_c_wclear": fnptr;) ::
("c_werase",             _import "__c0ffi_c_werase": fnptr;) ::
("c_wmove",              _import "__c0ffi_c_wmove": fnptr;) ::
("c_wrefresh",           _import "__c0ffi_c_wrefresh": fnptr;) ::
("c_wstandend",          _import "__c0ffi_c_wstandend": fnptr;) ::
("c_wstandout",          _import "__c0ffi_c_wstandout": fnptr;) ::
("cc_getbegx",           _import "__c0ffi_cc_getbegx": fnptr;) ::
("cc_getbegy",           _import "__c0ffi_cc_getbegy": fnptr;) ::
("cc_getmaxx",           _import "__c0ffi_cc_getmaxx": fnptr;) ::
("cc_getmaxy",           _import "__c0ffi_cc_getmaxy": fnptr;) ::
("cc_getx",              _import "__c0ffi_cc_getx": fnptr;) ::
("cc_gety",              _import "__c0ffi_cc_gety": fnptr;) ::
("cc_highlight",         _import "__c0ffi_cc_highlight": fnptr;) ::
("cc_key_is_backspace",  _import "__c0ffi_cc_key_is_backspace": fnptr;) ::
("cc_key_is_down",       _import "__c0ffi_cc_key_is_down": fnptr;) ::
("cc_key_is_enter",      _import "__c0ffi_cc_key_is_enter": fnptr;) ::
("cc_key_is_left",       _import "__c0ffi_cc_key_is_left": fnptr;) ::
("cc_key_is_right",      _import "__c0ffi_cc_key_is_right": fnptr;) ::
("cc_key_is_up",         _import "__c0ffi_cc_key_is_up": fnptr;) ::
("cc_wboldoff",          _import "__c0ffi_cc_wboldoff": fnptr;) ::
("cc_wboldon",           _import "__c0ffi_cc_wboldon": fnptr;) ::
("cc_wdimoff",           _import "__c0ffi_cc_wdimoff": fnptr;) ::
("cc_wdimon",            _import "__c0ffi_cc_wdimon": fnptr;) ::
("cc_wreverseoff",       _import "__c0ffi_cc_wreverseoff": fnptr;) ::
("cc_wreverseon",        _import "__c0ffi_cc_wreverseon": fnptr;) ::
("cc_wunderoff",         _import "__c0ffi_cc_wunderoff": fnptr;) ::
("cc_wunderon",          _import "__c0ffi_cc_wunderon": fnptr;) ::
[]))

(* Library file *)
val lib_file = List.foldr Map.insert' Map.empty (mapN (
("file_close",           _import "__c0ffi_file_close": fnptr;) ::
("file_eof",             _import "__c0ffi_file_eof": fnptr;) ::
("file_read",            _import "__c0ffi_file_read": fnptr;) ::
("file_readline",        _import "__c0ffi_file_readline": fnptr;) ::
[]))

(* Library img *)
val lib_img = List.foldr Map.insert' Map.empty (mapN (
("image_clone",          _import "__c0ffi_image_clone": fnptr;) ::
("image_create",         _import "__c0ffi_image_create": fnptr;) ::
("image_data",           _import "__c0ffi_image_data": fnptr;) ::
("image_destroy",        _import "__c0ffi_image_destroy": fnptr;) ::
("image_height",         _import "__c0ffi_image_height": fnptr;) ::
("image_load",           _import "__c0ffi_image_load": fnptr;) ::
("image_save",           _import "__c0ffi_image_save": fnptr;) ::
("image_subimage",       _import "__c0ffi_image_subimage": fnptr;) ::
("image_width",          _import "__c0ffi_image_width": fnptr;) ::
[]))

(* Library parse *)
val lib_parse = List.foldr Map.insert' Map.empty (mapN (
("parse_bool",           _import "__c0ffi_parse_bool": fnptr;) ::
("parse_int",            _import "__c0ffi_parse_int": fnptr;) ::
[]))

(* Library string *)
val lib_string = List.foldr Map.insert' Map.empty (mapN (
("char_chr",             _import "__c0ffi_char_chr": fnptr;) ::
("char_ord",             _import "__c0ffi_char_ord": fnptr;) ::
("string_charat",        _import "__c0ffi_string_charat": fnptr;) ::
("string_compare",       _import "__c0ffi_string_compare": fnptr;) ::
("string_equal",         _import "__c0ffi_string_equal": fnptr;) ::
("string_from_chararray",_import "__c0ffi_string_from_chararray": fnptr;) ::
("string_frombool",      _import "__c0ffi_string_frombool": fnptr;) ::
("string_fromchar",      _import "__c0ffi_string_fromchar": fnptr;) ::
("string_fromint",       _import "__c0ffi_string_fromint": fnptr;) ::
("string_join",          _import "__c0ffi_string_join": fnptr;) ::
("string_length",        _import "__c0ffi_string_length": fnptr;) ::
("string_sub",           _import "__c0ffi_string_sub": fnptr;) ::
("string_terminated",    _import "__c0ffi_string_terminated": fnptr;) ::
("string_to_chararray",  _import "__c0ffi_string_to_chararray": fnptr;) ::
("string_tolower",       _import "__c0ffi_string_tolower": fnptr;) ::
[]))

fun load "" = NONE
  | load "args" = SOME (lib_args)
  | load "conio" = SOME (lib_conio)
  | load "curses" = SOME (lib_curses)
  | load "file" = SOME (lib_file)
  | load "img" = SOME (lib_img)
  | load "parse" = SOME (lib_parse)
  | load "string" = SOME (lib_string)
  | load _ = NONE

fun close _ = ()

fun get lib sym = Map.find (lib, sym)

end
